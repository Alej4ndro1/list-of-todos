{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","value","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","queryFilter","todoTitle","queryText","toLowerCase","includes","statusFilter","useMemo","title","completed","length","className","map","id","classNames","onClick","currentTodoActions","modalTodo","TodoFilter","onSubmit","event","preventDefault","onChange","target","filterActions","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","useEffect","a","undefined","userId","selectedUser","href","email","name","App","isLoading","setLoading","wholeTodos","todoActions","console","log","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b795eca.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StateType = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: StateType = {\n  query: '',\n  status: 'all',\n};\n\ntype QueryType = {\n  type: 'SET_QUERY',\n  payload: string,\n};\n\ntype StatusType = {\n  type: 'SET_STATUS',\n  payload: Status,\n};\n\ntype Action = QueryType | StatusType;\n\nconst query = (value: string): QueryType => ({\n  type: 'SET_QUERY',\n  payload: value,\n});\n\nconst status = (value: Status): StatusType => ({\n  type: 'SET_STATUS',\n  payload: value,\n});\n\nexport const actions = { query, status };\n\nconst filterReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case 'SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype GetTodos = { type: 'GET_TODOS', payload: Todo[] };\n\nconst getTodos = (value: Todo[]): GetTodos => ({\n  type: 'GET_TODOS',\n  payload: value,\n});\n\nexport const actions = { getTodos };\n\nconst todosReducer = (state: Todo[] = [], action: GetTodos): Todo[] => {\n  switch (action.type) {\n    case 'GET_TODOS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useAppDispatch();\n\n  const queryFilter = (todoTitle: string, queryText: string) => {\n    return todoTitle.toLowerCase().includes(queryText.toLowerCase());\n  };\n\n  const statusFilter = useMemo(() => {\n    return todos.filter(({ title, completed }) => {\n      switch (status) {\n        case 'active':\n          return !completed && queryFilter(title, query);\n\n        case 'completed':\n          return completed && queryFilter(title, query);\n\n        default:\n          return queryFilter(title, query);\n      }\n    });\n  }, [todos, status, query]);\n\n  const modalTodo = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  return (\n    <>\n      {todos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {statusFilter.map((todo: Todo) => {\n            const { id, title, completed } = todo;\n\n            return (\n              <>\n                <tr data-cy=\"todo\">\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed\n                      ? (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )\n                      : null}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames(\n                      { 'has-text-danger': completed === false },\n                      { 'has-text-success': completed === true },\n                    )}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => modalTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye-slash': currentTodo?.id === id,\n                            'fa-eye': currentTodo?.id !== id,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              </>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const filter = useAppSelector(state => state.filter.query);\n  const dispatch = useAppDispatch();\n\n  const handleStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case 'completed':\n        return dispatch(filterActions.status(event.target.value));\n\n      case 'active':\n        return dispatch(filterActions.status(event.target.value));\n\n      case 'all':\n        return dispatch(filterActions.status(event.target.value));\n\n      default:\n        return event.target.value;\n    }\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.query(event.target.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleStatus}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleQuery}\n          value={filter}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    (async () => {\n      if (currentTodo?.userId === undefined) {\n        return;\n      }\n\n      const selectedUser = await getUser(currentTodo?.userId);\n\n      setUser(selectedUser);\n    })();\n  }, []);\n\n  const closeTodoModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? (<Loader />) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeTodoModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">fugiat veniam minus</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? (<strong className=\"has-text-success\">Done</strong>)\n                  : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const wholeTodos = await getTodos();\n\n        dispatch(todoActions.getTodos(wholeTodos));\n\n        setLoading(false);\n      } catch {\n        // eslint-disable-next-line no-console\n        console.log('Please, try again later');\n      }\n    })();\n  }, []);\n\n  // eslint-disable-next-line no-console\n  console.log(todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}